# This workflow will build a Java project with Gradle
# For more information see: https://help.github.com/actions/language-and-framework-guides/building-and-testing-java-with-gradle

name: Java CI with Gradle

permissions:
  contents: read

on:
  push:
    branches:
      - "**"
  pull_request:
    branches:
      - "**"

jobs:
  build:

    runs-on: ubuntu-latest

    steps:
      - uses: actions/checkout@v3
      - uses: actions/setup-java@v3
        with:
          java-version: '17'
          distribution: 'temurin'
      - name: Cache Gradle packages
        uses: actions/cache@v2
        with:
          path: |
            ~/.gradle/caches
            ~/.gradle/wrapper
          key: ${{ runner.os }}-gradle-${{ hashFiles('**/*.gradle*', '**/gradle-wrapper.properties') }}
          restore-keys: |
            ${{ runner.os }}-gradle-
      - name: Grant execute permission for gradlew
        run: chmod +x gradlew
      - name: Build with Gradle
        run: ./gradlew build
      - uses: actions/upload-artifact@v2
        with:
          name: Package
          path: build/libs
      - name: Cleanup Gradle Cache
        # Remove some files from the Gradle cache, so they aren't cached by GitHub Actions.
        # Restoring these files from a GitHub Actions cache might cause problems for future builds.
        run: rm -f ~/.gradle/caches/modules-2/modules-2.lock & rm -f ~/.gradle/caches/modules-2/gc.properties
      - name: Upload to dscord
        env:
          DISCORD_WEBHOOK: ${{secrets.CI_DISCORD_WEBHOOK}}
        run: |
          if [[ -z "$DISCORD_WEBHOOK" ]]; then
            echo "DISCORD_WEBHOOK env variable not set, skipping discord upload."
            exit 0
          fi
          for f in build/libs/*.jar; do
            echo "processing $f"
            if [[ $f != *-slim.jar ]]; then
              echo "uploading @$f"
              curl -H 'Content-Type: multipart/form-data' -X POST -F "file=@$f" $DISCORD_WEBHOOK
            fi
          done
          exit 0